import random
import pygame
import os
import numpy as np
import matplotlib.pyplot as plt
from pygame.locals import *

base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
Image_list = [
    os.path.join(base_dir, "assets", "house1.jpg"),
    os.path.join(base_dir, "assets", "house2.jpg"),
    os.path.join(base_dir, "assets", "house3.jpg"),
    os.path.join(base_dir, "assets", "house4.jpg"),
    # os.path.join(base_dir, "assets", "win1984.png"),
    # os.path.join(base_dir, "assets", "win2077.jpg"),
]


# –ó–∞–ø–∞—Å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def create_test_image(color, size=(250, 250)):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    """
    surface = pygame.Surface(size)
    surface.fill(color)
    return surface


class App:
    def __init__(self, width=920, height=610, caption="GloriousRoboticEelYodeler"):
        """
        Sample App
        Args:
            width: –æ—á–µ–≤–∏–¥–Ω–æ
            height: –Ω–µ—Ç—Ä—É–¥–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è
            caption: –æ—Å—Ç–∞–≤–∏–º —á–∏—Ç–∞—Ç–µ–ª—é, –∫–∞–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

        :return: üòÇüòÇüòÇ
        """
        pygame.init()
        self.width, self.height = width, height
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption(caption)

        # –¶–≤–µ—Ç–∞
        self.colors = {
            'background': (40, 44, 52),
            'panel': (30, 34, 42),
            'text': (220, 220, 220),
            'border': (80, 85, 95),
            'highlight': (97, 175, 239),
            'button': (150,150,250)
        }

        # –®—Ä–∏—Ñ—Ç—ã
        self.font_large = pygame.font.Font(None, 32)
        self.font_medium = pygame.font.Font(None, 24)
        self.font_small = pygame.font.Font(None, 18)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
        self.images = []
        self.processed_images = []
        self.image_size = (200, 200)
        self.image_surfaces = []
        self.histogram_surfaces = []
        self.selected_image_index = 0
        self.current_image_path = None

        # –ü–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä—ã
        self.margin = 20
        self.buttons_panel_width = 70
        self.buttons_panel_height = 30
        self.panel_width = self.width - 2 * self.margin
        self.panel_height = self.height - self.buttons_panel_height - 3 * self.margin

        self.button_prev = pygame.Rect(
            self.margin,
            self.margin,
            self.buttons_panel_width * 0.5 - 5,
            self.buttons_panel_height
            )
        self.button_next = pygame.Rect(
            self.margin + self.buttons_panel_width * 0.5 + 5,
            self.margin,
            self.buttons_panel_width * 0.5 - 5,
            self.buttons_panel_height
            )

        self.images_area = pygame.Rect(
            self.margin,
            self.margin * 2 + self.buttons_panel_height,
            self.panel_width,
            self.panel_height * 0.5 - self.margin * 0.5
        )


        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        self.histogram_area = pygame.Rect(
            self.margin,
            self.margin * 3 + self.buttons_panel_height + self.panel_height  * 0.5,
            self.panel_width,
            self.panel_height  * 0.5 - self.margin * 0.5
        )

        # –†–∞–∑–º–µ—Ä—ã –º–∏–Ω–∏–∞—Ç—é—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.thumb_width = 200
        self.thumb_height = 200

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.running = False

    def load_images(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        self.image_surfaces = []
        self.images = []

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
        loaded_count = 0
        for path in Image_list:
            if self.load_single_image(path):
                loaded_count += 1

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        if loaded_count == 0:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            test_colors = [(255, 100, 100), (100, 255, 100), (100, 100, 255), (255, 255, 100)]
            for i, color in enumerate(test_colors):
                test_surface = create_test_image(color, (self.thumb_width, self.thumb_height))
                self.image_surfaces.append(test_surface)
                # –°–æ–∑–¥–∞–µ–º fake array –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                fake_array = np.random.randint(0, 256, (self.thumb_height, self.thumb_width, 3), dtype=np.uint8)
                self.images.append(fake_array)
                print(f"–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i + 1}")

    def load_single_image(self, path):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        try:
            if os.path.exists(path):
                img_surf = pygame.image.load(path).convert()
                scaled_img_surf = pygame.transform.scale(
                    img_surf,
                    (self.thumb_width, self.thumb_height)
                )
                self.image_surfaces.append(scaled_img_surf)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ numpy array –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                try:
                    img_array = plt.imread(path)
                    self.images.append(img_array)
                except:
                    # –ï—Å–ª–∏ plt.imread –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ pygame surface
                    img_array = pygame.surfarray.array3d(scaled_img_surf)
                    img_array = np.transpose(img_array, (1, 0, 2))  # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
                    self.images.append(img_array)

                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(path)}")
                return True
            else:
                print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}")
            return False

    def to_grayscale_1(self, img):
        temp_img = img.copy()
        new_img = img.copy()
        temp_array = temp_img[:,:,0]*0.299 + temp_img[:,:,1]*0.587 + temp_img[:,:,2]*0.114
        new_img[:,:,0] = temp_array
        new_img[:,:,1] = temp_array
        new_img[:,:,2] = temp_array
        return new_img

    def to_grayscale_2(self, img):
        # temp_img = img.copy()
        # new_img = temp_img[:,:,0]#*0.2126 + temp_img[:,:,1]*0.7152 + temp_img[:,:,2]*0.0722
        temp_img = img.copy()
        new_img = img.copy()
        temp_array = temp_img[:,:,0]*0.2126 + temp_img[:,:,1]*0.7152 + temp_img[:,:,2]*0.0722
        new_img[:,:,0] = temp_array
        new_img[:,:,1] = temp_array
        new_img[:,:,2] = temp_array
        return new_img

    def grayscale_sub(self, img1, img2):
        new_img = abs(img1 - img2)
        return new_img

    def create_histograms(self):
        """
        –°–æ–∑–¥–∞–µ—Ç 4 –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
        - 3 –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        - 1 —Å–æ–≤–º–µ—â–µ–Ω–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–º—è –∫–∞–Ω–∞–ª–∞–º–∏
        """
        if not self.images or self.selected_image_index >= len(self.images):
            return []

        try:
            img = self.images[self.selected_image_index]

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]
            if abs(int(img[:, :, 0][0][0]) - img[:, :, 0][0][0]) > 0.0001:
                img = img.copy()
                img *= 255

            histogram_surfaces = []

            if len(img.shape) == 3:  # –¶–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                colors = ['lightgray', 'darkgray']
                methods_names = ['–ü–æ–ª—É—Ç–æ–Ω–æ–≤–æ–µ 1', '–ü–æ–ª—É—Ç–æ–Ω–æ–≤–æ–µ 2']

                # –°–æ–∑–¥–∞–µ–º 2 –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
                for i, (color, name) in enumerate(zip(colors, methods_names)):
                    fig, ax = plt.subplots(figsize=(2, 2))
                    ax.hist(self.processed_images[i][:, :, 0].flatten(), bins=16, alpha=0.8, color=color, density=True)
                    # ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—è', fontsize=8)
                    # ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', fontsize=8)
                    ax.set_title(name, fontsize=9)
                    ax.tick_params(axis='both', which='major', labelsize=7)
                    plt.tight_layout()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ pygame surface
                    fig.canvas.draw()
                    buf = np.frombuffer(fig.canvas.buffer_rgba(), dtype=np.uint8)
                    width, height = fig.canvas.get_width_height()
                    buf = buf.reshape(height, width, 4)  # RGBA —Ñ–æ—Ä–º–∞—Ç

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è pygame (—É–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª)
                    rgb_buf = buf[:, :, :3]
                    histogram_surf = pygame.surfarray.make_surface(rgb_buf.swapaxes(0, 1))
                    
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏
                    scaled_surf = pygame.transform.scale(
                        histogram_surf,
                        (int(self.thumb_width), int(self.thumb_height))
                    )
                    histogram_surfaces.append(scaled_surf)
                    plt.close(fig)

            return histogram_surfaces

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            histogram_surfaces = []
            for i in range(4):
                fallback_surf = pygame.Surface((int(self.histogram_area.width // 2 - 15),
                                                int(self.histogram_area.height // 2 - 40)))
                fallback_surf.fill((60, 60, 60))
                histogram_surfaces.append(fallback_surf)
            return histogram_surfaces

    def process_image(self, img_array, process_type="original"):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        Args:
            img_array: numpy array –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            process_type: —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ ("original", "halftone1", "halftone2", "substraction")
        Returns:
            –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π numpy array
        """

        if process_type == "original":
            return img_array.copy()
        # red -> 0, green -> 1, blue -> 2
        elif process_type == "halftone1":
            processed = self.to_grayscale_1(img_array)
            # plt.imsave(arr=processed, fname=os.path.join(base_dir, "assets", 'red.jpg'))
            return processed
        elif process_type == "halftone2":
            processed = self.to_grayscale_2(img_array)
            return processed
        elif process_type == "substraction":
            processed = self.grayscale_sub(self.to_grayscale_1(img_array), self.to_grayscale_2(img_array))
            return processed
        return img_array.copy()

    def create_processed_surfaces(self):
        """–°–æ–∑–¥–∞–µ—Ç 4 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.images or self.selected_image_index >= len(self.images):
            return []

        processed_surfaces = []

        for processed_img in self.processed_images:


            try:
                # –°–æ–∑–¥–∞–µ–º pygame surface —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
                if processed_img.shape[2] == 3:  # RGB
                    surf = pygame.surfarray.make_surface(processed_img.swapaxes(0, 1))
                else:  # RGBA
                    surf = pygame.surfarray.make_surface(processed_img[:, :, :3].swapaxes(0, 1))

                scaled_surf = pygame.transform.scale(surf, (self.thumb_width, self.thumb_height))
                processed_surfaces.append(scaled_surf)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è surface –¥–ª—è {process_type}: {e}")
                print(f"–§–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞: {processed_img.shape}, —Ç–∏–ø: {processed_img.dtype}")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                fallback_surf = pygame.Surface((self.thumb_width, self.thumb_height))
                fallback_surf.fill((100, 100, 100))  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
                processed_surfaces.append(fallback_surf)

        return processed_surfaces

    def create_processed_images(self):
        """–°–æ–∑–¥–∞–µ—Ç 4 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.images or self.selected_image_index >= len(self.images):
            return []

        base_img = self.images[self.selected_image_index].copy()
        process_types = ["original", "halftone1", "halftone2", "substraction"]
        processed_images = []

        for process_type in process_types:
            processed_img = self.process_image(base_img, process_type)

            try:
                processed_images.append(processed_img)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {process_type}: {e}")
                print(f"–§–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞: {processed_img.shape}, —Ç–∏–ø: {processed_img.dtype}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                processed_images.append(base_img)

        return processed_images

    def draw_interface(self):
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        self.screen.fill(self.colors['background'])

        # –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏:
        pygame.draw.rect(self.screen, self.colors['button'], self.button_prev, border_radius=8)
        text = "<"
        text_surf = self.font_large.render(text, True, self.colors['text'])
        self.screen.blit(text_surf, (self.button_prev.x + 8, self.button_prev.y + 2))  

        pygame.draw.rect(self.screen, self.colors['button'], self.button_next, border_radius=8)
        text = ">"
        text_surf = self.font_large.render(text, True, self.colors['text'])
        self.screen.blit(text_surf, (self.button_next.x + 10, self.button_next.y + 2))
        # –†–∏—Å—É–µ–º —Ä–∞–º–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π
        pygame.draw.rect(self.screen, self.colors['border'], self.images_area, 2)
        pygame.draw.rect(self.screen, self.colors['border'], self.histogram_area, 2)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if self.image_surfaces and self.selected_image_index < len(self.image_surfaces):
            processed_surfaces = self.create_processed_surfaces()

            if processed_surfaces:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏
                titles = ["–û—Ä–∏–≥–∏–Ω–∞–ª", "–ü–æ–ª—É—Ç–æ–Ω–æ–≤–æ–µ 1", "–ü–æ–ª—É—Ç–æ–Ω–æ–≤–æ–µ 2", "–†–∞–∑–Ω–æ—Å—Ç—å"]

                # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä—è–¥
                y = self.images_area.y + 40
                for i, (surf, title) in enumerate(zip(processed_surfaces, titles)):

                    x = self.images_area.x + 10 + i * (self.thumb_width + 20)

                    # –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.screen.blit(surf, (x, y))

                    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title_surf = self.font_small.render(title, True, self.colors['text'])
                    self.screen.blit(title_surf, (x, y - 20))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            info_text = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.selected_image_index + 1}/{len(self.image_surfaces)}"
            text_surf = self.font_medium.render(info_text, True, self.colors['text'])
            self.screen.blit(text_surf, (self.images_area.x + 10, self.images_area.y + 5))

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–≤—É—Ö –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º
            if self.histogram_surfaces:
                histogram_titles = ["–ü–æ–ª—É—Ç–æ–Ω–æ–≤–æ–µ 1", "–ü–æ–ª—É—Ç–æ–Ω–æ–≤–æ–µ 2"]

                y = self.histogram_area.y + 35
                for i, (hist_surf, title) in enumerate(zip(self.histogram_surfaces, histogram_titles)):
                    x = self.histogram_area.x + 10 + (i + 1) * (self.thumb_width + 20)

                    # –†–∏—Å—É–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
                    self.screen.blit(hist_surf, (x, y))

                    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title_surf = self.font_small.render(title, True, self.colors['text'])
                    self.screen.blit(title_surf, (x, y - 15))

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–ª–∞—Å—Ç–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            hist_title = self.font_medium.render("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø–æ–ª—É—Ç–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¢–æ–Ω / –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)", True, self.colors['text'])
            self.screen.blit(hist_title, (self.histogram_area.x + 10, self.histogram_area.y + 5))
    
    def change_image_ind(self, changer):
        new_index = (len(self.image_surfaces) + self.selected_image_index + changer) % len(self.image_surfaces)
        if new_index < len(self.image_surfaces):
            self.selected_image_index = new_index
            self.processed_images = self.create_processed_images() # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.histogram_surfaces = self.create_histograms()  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã

    def collide(self, point, collision_box):
        x_col = (collision_box.x <= point[0]) and (collision_box.x + collision_box.width >= point[0])
        y_col = (collision_box.y <= point[1]) and (collision_box.y + collision_box.height >= point[1])
        return x_col and y_col

    def handle_events(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        """
        for event in pygame.event.get():
            if event.type == QUIT:
                self.running = False

            elif event.type == MOUSEBUTTONDOWN:
                if self.collide(event.pos,self.button_prev):
                    self.change_image_ind(-1)
                elif self.collide(event.pos,self.button_next):
                    self.change_image_ind(1)

            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    self.running = False
                elif event.key == K_LEFT:
                    self.change_image_ind(-1)
                elif event.key == K_RIGHT:
                    self.change_image_ind(1)

    def main_loop(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.load_images()

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        if self.images:
            self.processed_images = self.create_processed_images()
            self.histogram_surfaces = self.create_histograms()

        self.running = True
        clock = pygame.time.Clock()

        while self.running:
            self.handle_events()
            self.draw_interface()  # –î–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫—É!
            pygame.display.flip()
            clock.tick(60)

        pygame.quit()


if __name__ == '__main__':
    app = App()
    app.main_loop()